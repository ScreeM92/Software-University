#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using NorthwindFramework;
using Northwind.Model;


namespace Northwind.Model	
{
	[Table("Products")]
	[ConcurrencyControl(OptimisticConcurrencyControlStrategy.Changed)]
	[KeyGenerator(KeyGenerator.Autoinc)]
	[Serializable()]
	public partial class Product : NotificationObject
	{
		private int _productID;
		[Column("ProductID", OpenAccessType = OpenAccessType.Int32, IsBackendCalculated = true, IsPrimaryKey = true, Length = 0, Scale = 0, SqlType = "int")]
		[Storage("_productID")]
		public virtual int ProductID 
		{ 
		    get
		    {
		        return this._productID;
		    }
		    set
		    {
				if (this.ProductID == value)
				{
					return;
				}
		        this._productID = value;
				this.RaisePropertyChanged("ProductID");
		    }
		}
		
		private string _productName;
		[Column("ProductName", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, Length = 40, Scale = 0, SqlType = "nvarchar")]
		[Storage("_productName")]
		public virtual string ProductName 
		{ 
		    get
		    {
		        return this._productName;
		    }
		    set
		    {
				if (this.ProductName == value)
				{
					return;
				}
		        this._productName = value;
				this.RaisePropertyChanged("ProductName");
		    }
		}
		
		private int? _supplierID;
		[Column("SupplierID", OpenAccessType = OpenAccessType.Int32, IsNullable = true, Length = 0, Scale = 0, SqlType = "int")]
		[Storage("_supplierID")]
		public virtual int? SupplierID 
		{ 
		    get
		    {
		        return this._supplierID;
		    }
		    set
		    {
				if (this.SupplierID == value)
				{
					return;
				}
		        this._supplierID = value;
				this.RaisePropertyChanged("SupplierID");
		    }
		}
		
		private int? _categoryID;
		[Column("CategoryID", OpenAccessType = OpenAccessType.Int32, IsNullable = true, Length = 0, Scale = 0, SqlType = "int")]
		[Storage("_categoryID")]
		public virtual int? CategoryID 
		{ 
		    get
		    {
		        return this._categoryID;
		    }
		    set
		    {
				if (this.CategoryID == value)
				{
					return;
				}
		        this._categoryID = value;
				this.RaisePropertyChanged("CategoryID");
		    }
		}
		
		private string _quantityPerUnit;
		[Column("QuantityPerUnit", OpenAccessType = OpenAccessType.UnicodeStringVariableLength, IsNullable = true, Length = 20, Scale = 0, SqlType = "nvarchar")]
		[Storage("_quantityPerUnit")]
		public virtual string QuantityPerUnit 
		{ 
		    get
		    {
		        return this._quantityPerUnit;
		    }
		    set
		    {
				if (this.QuantityPerUnit == value)
				{
					return;
				}
		        this._quantityPerUnit = value;
				this.RaisePropertyChanged("QuantityPerUnit");
		    }
		}
		
		private decimal? _unitPrice;
		[Column("UnitPrice", OpenAccessType = OpenAccessType.Currency, IsNullable = true, Length = 0, Scale = 0, SqlType = "money")]
		[Storage("_unitPrice")]
		public virtual decimal? UnitPrice 
		{ 
		    get
		    {
		        return this._unitPrice;
		    }
		    set
		    {
				if (this.UnitPrice == value)
				{
					return;
				}
		        this._unitPrice = value;
				this.RaisePropertyChanged("UnitPrice");
		    }
		}
		
		private short? _unitsInStock;
		[Column("UnitsInStock", OpenAccessType = OpenAccessType.Int16, IsNullable = true, Length = 0, Scale = 0, SqlType = "smallint")]
		[Storage("_unitsInStock")]
		public virtual short? UnitsInStock 
		{ 
		    get
		    {
		        return this._unitsInStock;
		    }
		    set
		    {
				if (this.UnitsInStock == value)
				{
					return;
				}
		        this._unitsInStock = value;
				this.RaisePropertyChanged("UnitsInStock");
		    }
		}
		
		private short? _unitsOnOrder;
		[Column("UnitsOnOrder", OpenAccessType = OpenAccessType.Int16, IsNullable = true, Length = 0, Scale = 0, SqlType = "smallint")]
		[Storage("_unitsOnOrder")]
		public virtual short? UnitsOnOrder 
		{ 
		    get
		    {
		        return this._unitsOnOrder;
		    }
		    set
		    {
				if (this.UnitsOnOrder == value)
				{
					return;
				}
		        this._unitsOnOrder = value;
				this.RaisePropertyChanged("UnitsOnOrder");
		    }
		}
		
		private short? _reorderLevel;
		[Column("ReorderLevel", OpenAccessType = OpenAccessType.Int16, IsNullable = true, Length = 0, Scale = 0, SqlType = "smallint")]
		[Storage("_reorderLevel")]
		public virtual short? ReorderLevel 
		{ 
		    get
		    {
		        return this._reorderLevel;
		    }
		    set
		    {
				if (this.ReorderLevel == value)
				{
					return;
				}
		        this._reorderLevel = value;
				this.RaisePropertyChanged("ReorderLevel");
		    }
		}
		
		private bool _discontinued;
		[Column("Discontinued", OpenAccessType = OpenAccessType.Bit, Length = 0, Scale = 0, SqlType = "bit")]
		[Storage("_discontinued")]
		public virtual bool Discontinued 
		{ 
		    get
		    {
		        return this._discontinued;
		    }
		    set
		    {
				if (this.Discontinued == value)
				{
					return;
				}
		        this._discontinued = value;
				this.RaisePropertyChanged("Discontinued");
		    }
		}
		
		private Category _category;
		[ForeignKeyAssociation(ConstraintName = "FK_Products_Categories", SharedFields = "CategoryID", TargetFields = "CategoryID")]
		[Storage("_category")]
		public virtual Category Category 
		{ 
		    get
		    {
		        return this._category;
		    }
		    set
		    {
				if (this.Category == value)
				{
					return;
				}
		        this._category = value;
				this.RaisePropertyChanged("Category");
		    }
		}
		
		private Supplier _supplier;
		[ForeignKeyAssociation(ConstraintName = "FK_Products_Suppliers", SharedFields = "SupplierID", TargetFields = "SupplierID")]
		[Storage("_supplier")]
		public virtual Supplier Supplier 
		{ 
		    get
		    {
		        return this._supplier;
		    }
		    set
		    {
				if (this.Supplier == value)
				{
					return;
				}
		        this._supplier = value;
				this.RaisePropertyChanged("Supplier");
		    }
		}
		
		private IList<OrderDetail> _orderDetails = new List<OrderDetail>();
		[Collection(InverseProperty = "Product")]
		[Storage("_orderDetails")]
		public virtual IList<OrderDetail> OrderDetails 
		{ 
		    get
		    {
		        return this._orderDetails;
		    }
		}
		
	}
}
